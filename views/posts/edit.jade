extends ../layout

block content
  .container
    if post.id
      h1.page-header 글수정
    else
      h1.page-header 글쓰기

    form(action = (post.id) ? "/posts/#{post.id}?_method=PUT" : "/posts", method='POST', enctype="multipart/form-data")
      .form-group
        label(for='title') Title
        input.form-control(type='text', id='title', name='title', placeholder='title', value=post.title)
      .form-group
        label(for='images') 이미지 1
        input.form-control(type="file", name='photos')
      .form-group
        label(for='images') 이미지 2
        input.form-control(type="file", name='photos')
      .form-group
        label(for='images') 이미지 3
        input.form-control(type="file", name='photos')
      //- .form-group
      //-   img#preview.img-responsive(src="https://dummyimage.com/200x200/ccc/fff")
      //-   form#form(method="POST", action="/posts/upload")
      //-     input#file.form-control(type="file")
      //-     p#status Please select a file
      //-     input#url.form-control(type="text", readonly="readonly", name="url", value="")
      //-     button#submit.btn.btn-primary(disabled="disabled") Upload
      .form-group  
        label(for='title') City
        input.form-control(type='text', id='city', name='city', placeholder='city', value=post.city)
        //- input.form-control(type='text', id='q', size=20, placeholder='country')
        //- i.fa.fa-spin.fa-spinner
        //- ul.suggest-box
      .form-group
        label(for='title') Address
        //- input#postCode(type='text', name='postCode', placeholder='우편번호')
        //-   | &nbsp;&nbsp;&nbsp;
        //-     input(type='button', value='우편번호 찾기 ', onclick='execDaumPostCode()')
        //-     br
        //-     | &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
        //-     input#roadAddress(type='text', name='roadAddress', placeholder='도로명주소')
        //-     input#detailAddress(type='text', name='detailAddress', placeholder='상세주소')
        input.form-control(type='text', id='address', name='address', placeholder='address', value=post.address)
      .form-group
        label(for='title') Price
        input.form-control(type='text', id='price', name='price', placeholder='price', value=post.price)
      .form-group
        label(for='title') Facility
        input.form-control(type='text', id='Facility', rows='6', name='facility', placeholder='facility', value=post.facility)
      .form-group
        label(for='title') Rule
        input.form-control(type='text', id='rule', rows='6', name='rule', placeholder='rule', value=post.rule)
      .form-group
        label(for='content') Content
        textarea.form-control(id='content', rows='10', name='content', placeholder='content here')= post.content

      div.form-actions
        a.btn.btn-default(href='javascript:window.history.back();') 뒤로 
        | 
        button.btn.btn-primary(type='submit') 완료

    //- script.
    //-   // 우편번호 찾기 화면을 넣을 element
    //-   var element_layer = document.getElementById('layer');
    //-   function closeDaumPostcode() {
    //-   // iframe을 넣은 element를 안보이게 한다.
    //-   element_layer.style.display = 'none';
    //-   }
    //-   function execDaumPostCode() {
    //-   new daum.Postcode({
    //-   oncomplete: function(data) {
    //-   // 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.
    //-   // 각 주소의 노출 규칙에 따라 주소를 조합한다.
    //-   // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
    //-   var fullAddr = data.address; // 최종 주소 변수
    //-   var extraAddr = ''; // 조합형 주소 변수
    //-   // 기본 주소가 도로명 타입일때 조합한다.
    //-   if(data.addressType === 'R'){
    //-   //법정동명이 있을 경우 추가한다.
    //-   if(data.bname !== ''){
    //-   extraAddr += data.bname;
    //-   }
    //-   // 건물명이 있을 경우 추가한다.
    //-   if(data.buildingName !== ''){
    //-   extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);
    //-   }
    //-   // 조합형주소의 유무에 따라 양쪽에 괄호를 추가하여 최종 주소를 만든다.
    //-   fullAddr += (extraAddr !== '' ? ' ('+ extraAddr +')' : '');
    //-   }
    //-   // 우편번호와 주소 정보를 해당 필드에 넣는다.
    //-   document.getElementById('postCode').value = data.zonecode; //5자리 새우편번호 사용
    //-   document.getElementById('roadAddress').value = fullAddr;
    //-   document.getElementById('detailAddress').focus();
    //-   // iframe을 넣은 element를 안보이게 한다.
    //-   // (autoClose:false 기능을 이용한다면, 아래 코드를 제거해야 화면에서 사라지지 않는다.)
    //-   element_layer.style.display = 'none';
    //-   },
    //-   width : '100%',
    //-   height : '100%'
    //-   }).embed(element_layer);
    //-   // iframe을 넣은 element를 보이게 한다.
    //-   element_layer.style.display = 'block';
    //-   // iframe을 넣은 element의 위치를 화면의 가운데로 이동시킨다.
    //-   initLayerPosition();
    //-   }
    //-   // 브라우저의 크기 변경에 따라 레이어를 가운데로 이동시키고자 하실때에는
    //-   // resize이벤트나, orientationchange이벤트를 이용하여 값이 변경될때마다 아래 함수를 실행 시켜 주시거나,
    //-   // 직접 element_layer의 top,left값을 수정해 주시면 됩니다.
    //-   function initLayerPosition(){
    //-   var width = 300; //우편번호 서비스가 들어갈 element의 width
    //-   var height = 460; //우편번호 서비스가 들어갈 element의 height
    //-   var borderWidth = 5; //샘플에서 사용하는 border의 두께
    //-   // 위에서 선언한 값들을 실제 element에 넣는다.
    //-   element_layer.style.width = width + 'px';
    //-   element_layer.style.height = height + 'px';
    //-   element_layer.style.border = borderWidth + 'px solid';
    //-   // 실행되는 순간의 화면 너비와 높이 값을 가져와서 중앙에 뜰 수 있도록 위치를 계산한다.
    //-   element_layer.style.left = (((window.innerWidth || document.documentElement.clientWidth) - width)/2 - borderWidth) + 'px';
    //-   element_layer.style.top = (((window.innerHeight || document.documentElement.clientHeight) - height)/2 - borderWidth) + 'px';
    //-   }
   


    //- script(type='text/javascript').
    //-   $(function() {
    //-     $("#preview").hide();
    //-     $("#file").change(function() {
    //-       var file = $("#file")[0].files[0];
    //-       if (file) {
    //-         var url = "/s3?filename=" + file.name + "&type=" + file.type;
    //-         console.log(url);
    //-         $.getJSON(url, function(resp) {
    //-           $.ajax({
    //-             url: resp.signedRequest,
    //-             method: 'PUT',
    //-             data: file,
    //-             headers: {'x-amz-acl': 'public-read', 'Content-Type': file.type},
    //-             processData: false, 
    //-             contentType: file.type,
    //-             success: function() {
    //-               $("#preview").attr("src", resp.url).show();
    //-               $("#url").val(resp.url);
    //-               $("#submit").prop("disabled", false);
    //-             }
    //-            });
    //-         });
    //-       }
    //-     });
    //-   });